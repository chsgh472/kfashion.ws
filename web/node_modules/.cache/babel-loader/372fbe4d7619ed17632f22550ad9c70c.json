{"ast":null,"code":"import _initializerDefineProperty from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { action, flow, observable } from \"mobx\";\nimport axios from \"axios\";\nconst ListState = {\n  Loading: 'Loading',\n  Loaded: 'Loaded',\n  LoadFailed: 'LoadFailed'\n};\nlet CategoryStore = (_class = (_temp = class CategoryStore {\n  constructor() {\n    _initializerDefineProperty(this, \"listState\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"categoryList\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"changeCategory\", _descriptor3, this);\n\n    this.loadColorList = flow(function* loadColorList() {\n      this.listState = ListState.Loading;\n\n      try {\n        let response = yield axios.get(`/api/v1/category/item/basic/category`);\n        const colors = response.data.categoryList;\n        console.log(response.data);\n        this.categoryList = colors;\n        this.listState = ListState.Loaded;\n      } catch (error) {\n        this.listState = ListState.LoadFailed;\n      }\n    });\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"listState\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return ListState.Loaded;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"categoryList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"changeCategory\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.loadCategoryList();\n    };\n  }\n})), _class);\nexport { CategoryStore as default };","map":{"version":3,"sources":["/Users/jangseong-yeol/kfashion.ws/web/src/stores/CategoryStore.js"],"names":["action","flow","observable","axios","ListState","Loading","Loaded","LoadFailed","CategoryStore","loadColorList","listState","response","get","colors","data","categoryList","console","log","error","loadCategoryList"],"mappings":";;;;;;AAAA,SAAQA,MAAR,EAAgBC,IAAhB,EAAsBC,UAAtB,QAAuC,MAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAE,SADK;AAEdC,EAAAA,MAAM,EAAE,QAFM;AAGdC,EAAAA,UAAU,EAAE;AAHE,CAAlB;IAMqBC,a,sBAAN,MAAMA,aAAN,CAAoB;AAAA;AAAA;;AAAA;;AAAA;;AAAA,SAS/BC,aAT+B,GASfR,IAAI,CAAC,UAAUQ,aAAV,GAA0B;AAC3C,WAAKC,SAAL,GAAiBN,SAAS,CAACC,OAA3B;;AAEA,UAAI;AACA,YAAIM,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,sCAAX,CAArB;AACA,cAAMC,MAAM,GAAGF,QAAQ,CAACG,IAAT,CAAcC,YAA7B;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACG,IAArB;AAEA,aAAKC,YAAL,GAAoBF,MAApB;AAEA,aAAKH,SAAL,GAAiBN,SAAS,CAACE,MAA3B;AACH,OATD,CASE,OAAMY,KAAN,EAAa;AACX,aAAKR,SAAL,GAAiBN,SAAS,CAACG,UAA3B;AACH;AAEJ,KAhBmB,CATW;AAAA;;AAAA,C,mFAE9BL,U;;;;;WAAuBE,SAAS,CAACE,M;;gFACjCJ,U;;;;;WAA0B,E;;kFAE1BF,M;;;;;WAAwB,MAAM;AAC3B,WAAKmB,gBAAL;AACH,K;;;SAPgBX,a","sourcesContent":["import {action, flow, observable} from \"mobx\";\nimport axios from \"axios\";\n\n\nconst ListState = {\n    Loading: 'Loading',\n    Loaded: 'Loaded',\n    LoadFailed: 'LoadFailed',\n};\n\nexport default class CategoryStore {\n\n    @observable listState = ListState.Loaded;\n    @observable categoryList = [];\n\n    @action changeCategory = () => {\n        this.loadCategoryList();\n    }\n\n    loadColorList = flow(function* loadColorList() {\n        this.listState = ListState.Loading;\n\n        try {\n            let response = yield axios.get(`/api/v1/category/item/basic/category`)\n            const colors = response.data.categoryList;\n\n            console.log(response.data);\n\n            this.categoryList = colors;\n\n            this.listState = ListState.Loaded;\n        } catch(error) {\n            this.listState = ListState.LoadFailed;\n        }\n\n    })\n\n\n\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jangseong-yeol/kfashion.ws/web/src/views/labeling/Test.js\";\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { createFileFromUrl, readFile } from '../helpers';\n/**\n * This component provides an uncontrolled version of the DropzoneDialogBase component.\n *\n * It supports all the Props and Methods from `DropzoneDialogBase` but keeps the files state internally.\n *\n * **Note** The `onSave` handler also returns `File[]` with all the accepted files.\n */\n\nclass Test extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileObjects: []\n    };\n\n    this.notifyFileChange = () => {\n      const {\n        onChange\n      } = this.props;\n      const {\n        fileObjects\n      } = this.state;\n\n      if (onChange) {\n        onChange(fileObjects.map(fileObject => fileObject.file));\n      }\n    };\n\n    this.loadInitialFiles = async () => {\n      const {\n        initialFiles\n      } = this.props;\n\n      try {\n        const fileObjs = await Promise.all(initialFiles.map(async initialFile => {\n          let file;\n\n          if (typeof initialFile === 'string') {\n            file = await createFileFromUrl(initialFile);\n          } else {\n            file = initialFile;\n          }\n\n          const data = await readFile(file);\n          return {\n            file,\n            data\n          };\n        }));\n        this.setState(state => ({\n          fileObjects: [].concat(state.fileObjects, fileObjs)\n        }), this.notifyFileChange);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.addFiles = async newFileObjects => {\n      const {\n        filesLimit\n      } = this.props; // Update component state\n\n      this.setState(state => {\n        // Handle a single file\n        if (filesLimit <= 1) {\n          return {\n            fileObjects: [].concat(newFileObjects[0])\n          };\n        } // Handle multiple files\n\n\n        return {\n          fileObjects: [].concat(state.fileObjects, newFileObjects)\n        };\n      }, this.notifyFileChange);\n    };\n\n    this.deleteFile = (removedFileObj, removedFileObjIdx) => {\n      event.stopPropagation();\n      const {\n        onDelete\n      } = this.props;\n      const {\n        fileObjects\n      } = this.state; // Calculate remaining fileObjects array\n\n      const remainingFileObjs = fileObjects.filter((fileObject, i) => {\n        return i !== removedFileObjIdx;\n      }); // Notify removed file\n\n      if (onDelete) {\n        onDelete(removedFileObj.file);\n      } // Update local state\n\n\n      this.setState({\n        fileObjects: remainingFileObjs\n      }, this.notifyFileChange);\n    };\n\n    this.handleClose = evt => {\n      const {\n        clearOnUnmount,\n        onClose\n      } = this.props;\n\n      if (onClose) {\n        onClose(evt);\n      }\n\n      if (clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        }, this.notifyFileChange);\n      }\n    };\n\n    this.handleSave = evt => {\n      const {\n        clearOnUnmount,\n        onSave\n      } = this.props;\n      const {\n        fileObjects\n      } = this.state;\n\n      if (onSave) {\n        onSave(fileObjects.map(fileObject => fileObject.file), evt);\n      }\n\n      if (clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        }, this.notifyFileChange);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.loadInitialFiles();\n  }\n\n  componentWillUnmount() {\n    const {\n      clearOnUnmount\n    } = this.props;\n\n    if (clearOnUnmount) {\n      this.setState({\n        fileObjects: []\n      }, this.notifyFileChange);\n    }\n  }\n\n  render() {\n    const {\n      fileObjects\n    } = this.state;\n    return /*#__PURE__*/React.createElement(DropzoneDialogBase, Object.assign({}, this.props, {\n      fileObjects: fileObjects,\n      onAdd: this.addFiles,\n      onDelete: this.deleteFile,\n      onClose: this.handleClose,\n      onSave: this.handleSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nTest.defaultProps = {\n  clearOnUnmount: true,\n  filesLimit: 10,\n  initialFiles: []\n};\nTest.propTypes = { ...DropzoneDialogBase.propTypes,\n\n  /** Clear uploaded files when component is unmounted. */\n  clearOnUnmount: PropTypes.bool,\n\n  /** Maximum number of files that can be loaded into the dropzone. */\n  filesLimit: PropTypes.number,\n\n  /** List containing File objects or URL strings.<br/>\n   * **Note:** Please take care of CORS.\n   */\n  initialFiles: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.instanceOf(File), PropTypes.string])),\n\n  /**\n   * Fired when the user clicks the Submit button.\n   *\n   * @param {File[]} files All the files currently inside the Dropzone.\n   * @param {SyntheticEvent} event The react `SyntheticEvent`.\n   */\n  onSave: PropTypes.func\n};\nexport default Test;","map":{"version":3,"sources":["/Users/jangseong-yeol/kfashion.ws/web/src/views/labeling/Test.js"],"names":["PropTypes","React","createFileFromUrl","readFile","Test","PureComponent","state","fileObjects","notifyFileChange","onChange","props","map","fileObject","file","loadInitialFiles","initialFiles","fileObjs","Promise","all","initialFile","data","setState","concat","err","console","log","addFiles","newFileObjects","filesLimit","deleteFile","removedFileObj","removedFileObjIdx","event","stopPropagation","onDelete","remainingFileObjs","filter","i","handleClose","evt","clearOnUnmount","onClose","handleSave","onSave","componentDidMount","componentWillUnmount","render","defaultProps","propTypes","DropzoneDialogBase","bool","number","arrayOf","oneOfType","instanceOf","File","string","func"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport * as React from 'react';\n\nimport {createFileFromUrl, readFile} from '../helpers';\n\n\n\n/**\n * This component provides an uncontrolled version of the DropzoneDialogBase component.\n *\n * It supports all the Props and Methods from `DropzoneDialogBase` but keeps the files state internally.\n *\n * **Note** The `onSave` handler also returns `File[]` with all the accepted files.\n */\nclass Test extends React.PureComponent {\n    state = {\n        fileObjects: [],\n    }\n\n    componentDidMount() {\n        this.loadInitialFiles();\n    }\n\n    componentWillUnmount() {\n        const {clearOnUnmount} = this.props;\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    notifyFileChange = () => {\n        const {onChange} = this.props;\n        const {fileObjects} = this.state;\n\n        if (onChange) {\n            onChange(fileObjects.map((fileObject) => fileObject.file));\n        }\n    }\n\n    loadInitialFiles = async() => {\n        const {initialFiles} = this.props;\n        try {\n            const fileObjs = await Promise.all(\n                initialFiles.map(async(initialFile) => {\n                    let file;\n                    if (typeof initialFile === 'string' ) {\n                        file = await createFileFromUrl(initialFile);\n                    } else {\n                        file = initialFile;\n                    }\n                    const data = await readFile(file);\n\n                    return {\n                        file,\n                        data,\n                    };\n                })\n            );\n\n            this.setState((state) => ({\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    fileObjs\n                ),\n            }), this.notifyFileChange);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    addFiles = async(newFileObjects) => {\n        const {filesLimit} = this.props;\n        // Update component state\n        this.setState((state) => {\n            // Handle a single file\n            if (filesLimit <= 1) {\n                return {\n                    fileObjects: [].concat(newFileObjects[0]),\n                };\n            }\n\n            // Handle multiple files\n            return {\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    newFileObjects\n                ),\n            };\n        }, this.notifyFileChange);\n    }\n\n    deleteFile = (removedFileObj, removedFileObjIdx) => {\n        event.stopPropagation();\n\n        const {onDelete} = this.props;\n        const {fileObjects} = this.state;\n\n        // Calculate remaining fileObjects array\n        const remainingFileObjs = fileObjects.filter((fileObject, i) => {\n            return i !== removedFileObjIdx;\n        });\n\n        // Notify removed file\n        if (onDelete) {\n            onDelete(removedFileObj.file);\n        }\n\n        // Update local state\n        this.setState({\n            fileObjects: remainingFileObjs,\n        }, this.notifyFileChange);\n    }\n\n    handleClose = (evt) => {\n        const {clearOnUnmount, onClose} = this.props;\n\n        if (onClose) {\n            onClose(evt);\n        }\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    handleSave = (evt) => {\n        const {clearOnUnmount, onSave} = this.props;\n        const {fileObjects} = this.state;\n\n        if (onSave) {\n            onSave(fileObjects.map((fileObject) => fileObject.file), evt);\n        }\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    render() {\n        const {fileObjects} = this.state;\n\n        return (\n            <DropzoneDialogBase\n                {...this.props}\n                fileObjects={fileObjects}\n                onAdd={this.addFiles}\n                onDelete={this.deleteFile}\n                onClose={this.handleClose}\n                onSave={this.handleSave}\n            />\n        );\n    }\n}\n\nTest.defaultProps = {\n    clearOnUnmount: true,\n    filesLimit: 10,\n    initialFiles: [],\n};\n\nTest.propTypes = {\n    ...DropzoneDialogBase.propTypes,\n    /** Clear uploaded files when component is unmounted. */\n    clearOnUnmount: PropTypes.bool,\n    /** Maximum number of files that can be loaded into the dropzone. */\n    filesLimit: PropTypes.number,\n    /** List containing File objects or URL strings.<br/>\n     * **Note:** Please take care of CORS.\n     */\n    initialFiles: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.instanceOf(File),\n            PropTypes.string,\n        ])\n    ),\n    /**\n     * Fired when the user clicks the Submit button.\n     *\n     * @param {File[]} files All the files currently inside the Dropzone.\n     * @param {SyntheticEvent} event The react `SyntheticEvent`.\n     */\n    onSave: PropTypes.func,\n};\n\nexport default Test;"]},"metadata":{},"sourceType":"module"}
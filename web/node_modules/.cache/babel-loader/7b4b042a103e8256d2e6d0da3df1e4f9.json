{"ast":null,"code":"var _jsxFileName = \"/Users/jangseong-yeol/kfashion.ws/web/src/views/labeling/Test.js\";\nimport React, { Component } from 'react';\nimport { DropzoneDialog } from 'material-ui-dropzone';\nimport Button from '@material-ui/core/Button';\nimport axios from \"axios\";\nexport default class Test extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileObjects: []\n    };\n\n    this.notifyFileChange = () => {\n      const {\n        onChange\n      } = this.props;\n      const {\n        fileObjects\n      } = this.state;\n\n      if (onChange) {\n        onChange(fileObjects.map(fileObject => fileObject.file));\n      }\n    };\n\n    this.loadInitialFiles = async () => {\n      const {\n        initialFiles\n      } = this.props;\n\n      try {\n        const fileObjs = await Promise.all(initialFiles.map(async initialFile => {\n          let file;\n\n          if (typeof initialFile === 'string') {\n            file = await createFileFromUrl(initialFile);\n          } else {\n            file = initialFile;\n          }\n\n          const data = await readFile(file);\n          return {\n            file,\n            data\n          };\n        }));\n        this.setState(state => ({\n          fileObjects: [].concat(state.fileObjects, fileObjs)\n        }), this.notifyFileChange);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.addFiles = async newFileObjects => {\n      const {\n        filesLimit\n      } = this.props; // Update component state\n\n      this.setState(state => {\n        // Handle a single file\n        if (filesLimit <= 1) {\n          return {\n            fileObjects: [].concat(newFileObjects[0])\n          };\n        } // Handle multiple files\n\n\n        return {\n          fileObjects: [].concat(state.fileObjects, newFileObjects)\n        };\n      }, this.notifyFileChange);\n    };\n\n    this.deleteFile = (removedFileObj, removedFileObjIdx) => {\n      event.stopPropagation();\n      const {\n        onDelete\n      } = this.props;\n      const {\n        fileObjects\n      } = this.state; // Calculate remaining fileObjects array\n\n      const remainingFileObjs = fileObjects.filter((fileObject, i) => {\n        return i !== removedFileObjIdx;\n      }); // Notify removed file\n\n      if (onDelete) {\n        onDelete(removedFileObj.file);\n      } // Update local state\n\n\n      this.setState({\n        fileObjects: remainingFileObjs\n      }, this.notifyFileChange);\n    };\n\n    this.handleClose = evt => {\n      const {\n        clearOnUnmount,\n        onClose\n      } = this.props;\n\n      if (onClose) {\n        onClose(evt);\n      }\n\n      if (clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        }, this.notifyFileChange);\n      }\n    };\n\n    this.handleSave = evt => {\n      const {\n        clearOnUnmount,\n        onSave\n      } = this.props;\n      const {\n        fileObjects\n      } = this.state;\n\n      if (onSave) {\n        onSave(fileObjects.map(fileObject => fileObject.file), evt);\n      }\n\n      if (clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        }, this.notifyFileChange);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.loadInitialFiles();\n  }\n\n  componentWillUnmount() {\n    const {\n      clearOnUnmount\n    } = this.props;\n\n    if (clearOnUnmount) {\n      this.setState({\n        fileObjects: []\n      }, this.notifyFileChange);\n    }\n  }\n\n  render() {\n    const {\n      fileObjects\n    } = this.state;\n    return /*#__PURE__*/React.createElement(DropzoneDialogBase, Object.assign({}, this.props, {\n      fileObjects: fileObjects,\n      onAdd: this.addFiles,\n      onDelete: this.deleteFile,\n      onClose: this.handleClose,\n      onSave: this.handleSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jangseong-yeol/kfashion.ws/web/src/views/labeling/Test.js"],"names":["React","Component","DropzoneDialog","Button","axios","Test","state","fileObjects","notifyFileChange","onChange","props","map","fileObject","file","loadInitialFiles","initialFiles","fileObjs","Promise","all","initialFile","createFileFromUrl","data","readFile","setState","concat","err","console","log","addFiles","newFileObjects","filesLimit","deleteFile","removedFileObj","removedFileObjIdx","event","stopPropagation","onDelete","remainingFileObjs","filter","i","handleClose","evt","clearOnUnmount","onClose","handleSave","onSave","componentDidMount","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,cAAR,QAA6B,sBAA7B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACxCK,KADwC,GAChC;AACJC,MAAAA,WAAW,EAAE;AADT,KADgC;;AAAA,SAmBxCC,gBAnBwC,GAmBrB,MAAM;AACrB,YAAM;AAACC,QAAAA;AAAD,UAAa,KAAKC,KAAxB;AACA,YAAM;AAACH,QAAAA;AAAD,UAAgB,KAAKD,KAA3B;;AAEA,UAAIG,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACF,WAAW,CAACI,GAAZ,CAAiBC,UAAD,IAAgBA,UAAU,CAACC,IAA3C,CAAD,CAAR;AACH;AACJ,KA1BuC;;AAAA,SA4BxCC,gBA5BwC,GA4BrB,YAAW;AAC1B,YAAM;AAACC,QAAAA;AAAD,UAAiB,KAAKL,KAA5B;;AACA,UAAI;AACA,cAAMM,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAR,CACnBH,YAAY,CAACJ,GAAb,CAAiB,MAAMQ,WAAN,IAAsB;AACnC,cAAIN,IAAJ;;AACA,cAAI,OAAOM,WAAP,KAAuB,QAA3B,EAAsC;AAClCN,YAAAA,IAAI,GAAG,MAAMO,iBAAiB,CAACD,WAAD,CAA9B;AACH,WAFD,MAEO;AACHN,YAAAA,IAAI,GAAGM,WAAP;AACH;;AACD,gBAAME,IAAI,GAAG,MAAMC,QAAQ,CAACT,IAAD,CAA3B;AAEA,iBAAO;AACHA,YAAAA,IADG;AAEHQ,YAAAA;AAFG,WAAP;AAIH,SAbD,CADmB,CAAvB;AAiBA,aAAKE,QAAL,CAAejB,KAAD,KAAY;AACtBC,UAAAA,WAAW,EAAE,GAAGiB,MAAH,CACTlB,KAAK,CAACC,WADG,EAETS,QAFS;AADS,SAAZ,CAAd,EAKI,KAAKR,gBALT;AAMH,OAxBD,CAwBE,OAAOiB,GAAP,EAAY;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ,KAzDuC;;AAAA,SA2DxCG,QA3DwC,GA2D7B,MAAMC,cAAN,IAAyB;AAChC,YAAM;AAACC,QAAAA;AAAD,UAAe,KAAKpB,KAA1B,CADgC,CAEhC;;AACA,WAAKa,QAAL,CAAejB,KAAD,IAAW;AACrB;AACA,YAAIwB,UAAU,IAAI,CAAlB,EAAqB;AACjB,iBAAO;AACHvB,YAAAA,WAAW,EAAE,GAAGiB,MAAH,CAAUK,cAAc,CAAC,CAAD,CAAxB;AADV,WAAP;AAGH,SANoB,CAQrB;;;AACA,eAAO;AACHtB,UAAAA,WAAW,EAAE,GAAGiB,MAAH,CACTlB,KAAK,CAACC,WADG,EAETsB,cAFS;AADV,SAAP;AAMH,OAfD,EAeG,KAAKrB,gBAfR;AAgBH,KA9EuC;;AAAA,SAgFxCuB,UAhFwC,GAgF3B,CAACC,cAAD,EAAiBC,iBAAjB,KAAuC;AAChDC,MAAAA,KAAK,CAACC,eAAN;AAEA,YAAM;AAACC,QAAAA;AAAD,UAAa,KAAK1B,KAAxB;AACA,YAAM;AAACH,QAAAA;AAAD,UAAgB,KAAKD,KAA3B,CAJgD,CAMhD;;AACA,YAAM+B,iBAAiB,GAAG9B,WAAW,CAAC+B,MAAZ,CAAmB,CAAC1B,UAAD,EAAa2B,CAAb,KAAmB;AAC5D,eAAOA,CAAC,KAAKN,iBAAb;AACH,OAFyB,CAA1B,CAPgD,CAWhD;;AACA,UAAIG,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACJ,cAAc,CAACnB,IAAhB,CAAR;AACH,OAd+C,CAgBhD;;;AACA,WAAKU,QAAL,CAAc;AACVhB,QAAAA,WAAW,EAAE8B;AADH,OAAd,EAEG,KAAK7B,gBAFR;AAGH,KApGuC;;AAAA,SAsGxCgC,WAtGwC,GAsGzBC,GAAD,IAAS;AACnB,YAAM;AAACC,QAAAA,cAAD;AAAiBC,QAAAA;AAAjB,UAA4B,KAAKjC,KAAvC;;AAEA,UAAIiC,OAAJ,EAAa;AACTA,QAAAA,OAAO,CAACF,GAAD,CAAP;AACH;;AAED,UAAIC,cAAJ,EAAoB;AAChB,aAAKnB,QAAL,CAAc;AACVhB,UAAAA,WAAW,EAAE;AADH,SAAd,EAEG,KAAKC,gBAFR;AAGH;AACJ,KAlHuC;;AAAA,SAoHxCoC,UApHwC,GAoH1BH,GAAD,IAAS;AAClB,YAAM;AAACC,QAAAA,cAAD;AAAiBG,QAAAA;AAAjB,UAA2B,KAAKnC,KAAtC;AACA,YAAM;AAACH,QAAAA;AAAD,UAAgB,KAAKD,KAA3B;;AAEA,UAAIuC,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAACtC,WAAW,CAACI,GAAZ,CAAiBC,UAAD,IAAgBA,UAAU,CAACC,IAA3C,CAAD,EAAmD4B,GAAnD,CAAN;AACH;;AAED,UAAIC,cAAJ,EAAoB;AAChB,aAAKnB,QAAL,CAAc;AACVhB,UAAAA,WAAW,EAAE;AADH,SAAd,EAEG,KAAKC,gBAFR;AAGH;AACJ,KAjIuC;AAAA;;AAKxCsC,EAAAA,iBAAiB,GAAG;AAChB,SAAKhC,gBAAL;AACH;;AAEDiC,EAAAA,oBAAoB,GAAG;AACnB,UAAM;AAACL,MAAAA;AAAD,QAAmB,KAAKhC,KAA9B;;AAEA,QAAIgC,cAAJ,EAAoB;AAChB,WAAKnB,QAAL,CAAc;AACVhB,QAAAA,WAAW,EAAE;AADH,OAAd,EAEG,KAAKC,gBAFR;AAGH;AACJ;;AAkHDwC,EAAAA,MAAM,GAAG;AACL,UAAM;AAACzC,MAAAA;AAAD,QAAgB,KAAKD,KAA3B;AAEA,wBACI,oBAAC,kBAAD,oBACQ,KAAKI,KADb;AAEI,MAAA,WAAW,EAAEH,WAFjB;AAGI,MAAA,KAAK,EAAE,KAAKqB,QAHhB;AAII,MAAA,QAAQ,EAAE,KAAKG,UAJnB;AAKI,MAAA,OAAO,EAAE,KAAKS,WALlB;AAMI,MAAA,MAAM,EAAE,KAAKI,UANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ;AAUH;;AAhJuC","sourcesContent":["import React, { Component } from 'react'\nimport {DropzoneDialog} from 'material-ui-dropzone'\nimport Button from '@material-ui/core/Button';\nimport axios from \"axios\";\n\nexport default class Test extends Component {\n    state = {\n        fileObjects: [],\n    }\n\n    componentDidMount() {\n        this.loadInitialFiles();\n    }\n\n    componentWillUnmount() {\n        const {clearOnUnmount} = this.props;\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    notifyFileChange = () => {\n        const {onChange} = this.props;\n        const {fileObjects} = this.state;\n\n        if (onChange) {\n            onChange(fileObjects.map((fileObject) => fileObject.file));\n        }\n    }\n\n    loadInitialFiles = async() => {\n        const {initialFiles} = this.props;\n        try {\n            const fileObjs = await Promise.all(\n                initialFiles.map(async(initialFile) => {\n                    let file;\n                    if (typeof initialFile === 'string' ) {\n                        file = await createFileFromUrl(initialFile);\n                    } else {\n                        file = initialFile;\n                    }\n                    const data = await readFile(file);\n\n                    return {\n                        file,\n                        data,\n                    };\n                })\n            );\n\n            this.setState((state) => ({\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    fileObjs\n                ),\n            }), this.notifyFileChange);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    addFiles = async(newFileObjects) => {\n        const {filesLimit} = this.props;\n        // Update component state\n        this.setState((state) => {\n            // Handle a single file\n            if (filesLimit <= 1) {\n                return {\n                    fileObjects: [].concat(newFileObjects[0]),\n                };\n            }\n\n            // Handle multiple files\n            return {\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    newFileObjects\n                ),\n            };\n        }, this.notifyFileChange);\n    }\n\n    deleteFile = (removedFileObj, removedFileObjIdx) => {\n        event.stopPropagation();\n\n        const {onDelete} = this.props;\n        const {fileObjects} = this.state;\n\n        // Calculate remaining fileObjects array\n        const remainingFileObjs = fileObjects.filter((fileObject, i) => {\n            return i !== removedFileObjIdx;\n        });\n\n        // Notify removed file\n        if (onDelete) {\n            onDelete(removedFileObj.file);\n        }\n\n        // Update local state\n        this.setState({\n            fileObjects: remainingFileObjs,\n        }, this.notifyFileChange);\n    }\n\n    handleClose = (evt) => {\n        const {clearOnUnmount, onClose} = this.props;\n\n        if (onClose) {\n            onClose(evt);\n        }\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    handleSave = (evt) => {\n        const {clearOnUnmount, onSave} = this.props;\n        const {fileObjects} = this.state;\n\n        if (onSave) {\n            onSave(fileObjects.map((fileObject) => fileObject.file), evt);\n        }\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            }, this.notifyFileChange);\n        }\n    }\n\n    render() {\n        const {fileObjects} = this.state;\n\n        return (\n            <DropzoneDialogBase\n                {...this.props}\n                fileObjects={fileObjects}\n                onAdd={this.addFiles}\n                onDelete={this.deleteFile}\n                onClose={this.handleClose}\n                onSave={this.handleSave}\n            />\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}
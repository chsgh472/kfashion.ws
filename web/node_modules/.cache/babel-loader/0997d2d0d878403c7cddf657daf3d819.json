{"ast":null,"code":"import _initializerDefineProperty from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;\n\nimport { action, flow, observable } from \"mobx\";\nimport axios from \"axios\";\nimport { State } from \"./AuthStore\";\nconst AddState = {\n  Closed: 'Closed',\n  Opened: 'Opened',\n  Adding: 'Adding',\n  Added: 'Added',\n  AddFailed: 'AddFailed'\n};\nconst UpdateState = {\n  Closed: 'Closed',\n  Loading: 'Loading',\n  Loaded: 'Loaded',\n  LoadFailed: 'LoadFailed',\n  Updating: 'Updating',\n  Updated: 'Updated',\n  UpdateFailed: 'UpdateFailed',\n  Uploading: 'Uploading',\n  Uploaded: 'Uploaded',\n  UploadFailed: 'UploadFailed'\n};\nlet FileUploadStore = (_class = (_temp = class FileUploadStore {\n  constructor() {\n    _initializerDefineProperty(this, \"files\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"uploadFile\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"addState\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"updateState\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"state\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"UploadFile\", _descriptor6, this);\n\n    this.fileupload = flow(function* changeUploadFile() {\n      const uploadFile = this.uploadFile;\n      console.log(\"this.uploadFile:\", uploadFile);\n      const formData = new FormData();\n      formData.append('file', uploadFile);\n      console.log(\"fileParam:\", formData);\n      yield axios.post('/api/v1/img/uploadMultipleFiles', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n    });\n  }\n\n  /*    @computed get isAdding() {\n          return this.addState === AddState.Adding;\n      }\n       @computed get isAdded() {\n          return this.addState === AddState.Added;\n      }\n       @computed get isAddFailed() {\n          return this.addState === AddState.AddFailed;\n      }*/\n  insertUploadFile() {}\n  /*   fileUpload = flow(function* fileUpload(e) {\n         const formData = new FormData()\n          formData.append('file', blob, 'filename.jpg')\n         formData.append('subPath', 'shop')\n          const res = await axios.post(`/api/v1/img/uploadImgFile`, formData)\n         try {\n             const formData = new FormData();\n             formData.append('file', e.target.file[0]);\n             const response = yield axios.post('/api/v1/img/uploadImgFile', formData);\n             if(response.status === 200) {\n             }\n         } catch (e) {\n             console.log('error다 이놈아');\n         }\n     });*/\n\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"files\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"uploadFile\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"addState\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return AddState.Closed;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"updateState\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return UpdateState.Closed;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"state\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return State.Ready;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"UploadFile\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return files => {\n      console.log('changeUploadFile 실행...:', files);\n      this.uploadFile = files;\n      const uploadFile = this.uploadFile;\n      console.log(\"this.uploadFile:\", uploadFile);\n    };\n  }\n})), _class);\nexport { FileUploadStore as default };","map":{"version":3,"sources":["/Users/jangseong-yeol/kfashion.ws/web/src/stores/FileUploadStore.js"],"names":["action","flow","observable","axios","State","AddState","Closed","Opened","Adding","Added","AddFailed","UpdateState","Loading","Loaded","LoadFailed","Updating","Updated","UpdateFailed","Uploading","Uploaded","UploadFailed","FileUploadStore","fileupload","changeUploadFile","uploadFile","console","log","formData","FormData","append","post","headers","insertUploadFile","Ready","files"],"mappings":";;;;;;AAAA,SAAQA,MAAR,EAAgBC,IAAhB,EAAsBC,UAAtB,QAAuC,MAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,aAApB;AAEA,MAAMC,QAAQ,GAAG;AACbC,EAAAA,MAAM,EAAE,QADK;AAEbC,EAAAA,MAAM,EAAE,QAFK;AAGbC,EAAAA,MAAM,EAAE,QAHK;AAIbC,EAAAA,KAAK,EAAE,OAJM;AAKbC,EAAAA,SAAS,EAAE;AALE,CAAjB;AAOA,MAAMC,WAAW,GAAG;AAChBL,EAAAA,MAAM,EAAE,QADQ;AAEhBM,EAAAA,OAAO,EAAE,SAFO;AAGhBC,EAAAA,MAAM,EAAE,QAHQ;AAIhBC,EAAAA,UAAU,EAAE,YAJI;AAKhBC,EAAAA,QAAQ,EAAE,UALM;AAMhBC,EAAAA,OAAO,EAAE,SANO;AAOhBC,EAAAA,YAAY,EAAE,cAPE;AAQhBC,EAAAA,SAAS,EAAE,WARK;AAShBC,EAAAA,QAAQ,EAAE,UATM;AAUhBC,EAAAA,YAAY,EAAE;AAVE,CAApB;IAYqBC,e,sBAAN,MAAMA,eAAN,CAAsB;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SAiDjCC,UAjDiC,GAiDpBrB,IAAI,CAAC,UAAUsB,gBAAV,GAA6B;AAC3C,YAAMC,UAAU,GAAG,KAAKA,UAAxB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,UAAhC;AACA,YAAMG,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBL,UAAxB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,QAA1B;AACA,YAAMxB,KAAK,CAAC2B,IAAN,CAAW,iCAAX,EAA8CH,QAA9C,EAAwD;AAACI,QAAAA,OAAO,EAAE;AAAC,0BAAe;AAAhB;AAAV,OAAxD,CAAN;AACH,KAPgB,CAjDgB;AAAA;;AAiBjC;;;;;;;;;AAWAC,EAAAA,gBAAgB,GAAE,CAEjB;AAED;;;;;;;;;;;;;;;;;AAhCiC,C,+EAChC9B,U;;;;;WAAmB,E;;8EACnBA,U;;;;;WAAwB,E;;4EACxBA,U;;;;;WAAsBG,QAAQ,CAACC,M;;+EAC/BJ,U;;;;;WAAyBS,WAAW,CAACL,M;;yEACrCJ,U;;;;;WAAmBE,KAAK,CAAC6B,K;;8EAMzBjC,M;;;;;WAAqBkC,KAAD,IAAW;AAC5BT,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAsCQ,KAAtC;AACA,WAAKV,UAAL,GAAkBU,KAAlB;AACA,YAAMV,UAAU,GAAG,KAAKA,UAAxB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,UAAhC;AACH,K;;;SAhBgBH,e","sourcesContent":["import {action, flow, observable} from \"mobx\";\nimport axios from \"axios\";\nimport {State} from \"./AuthStore\";\n\nconst AddState = {\n    Closed: 'Closed',\n    Opened: 'Opened',\n    Adding: 'Adding',\n    Added: 'Added',\n    AddFailed: 'AddFailed',\n};\nconst UpdateState = {\n    Closed: 'Closed',\n    Loading: 'Loading',\n    Loaded: 'Loaded',\n    LoadFailed: 'LoadFailed',\n    Updating: 'Updating',\n    Updated: 'Updated',\n    UpdateFailed: 'UpdateFailed',\n    Uploading: 'Uploading',\n    Uploaded: 'Uploaded',\n    UploadFailed: 'UploadFailed',\n};\nexport default class FileUploadStore {\n    @observable files = [];\n    @observable uploadFile = '';\n    @observable addState = AddState.Closed;\n    @observable updateState = UpdateState.Closed;\n    @observable state = State.Ready;\n    /*\n        @action fileUploadHandle = () => {\n            this.fileUpload();\n        }\n    */\n    @action UploadFile = (files) => {\n        console.log('changeUploadFile 실행...:',files )\n        this.uploadFile = files;\n        const uploadFile = this.uploadFile;\n        console.log(\"this.uploadFile:\", uploadFile);\n    }\n    /*    @computed get isAdding() {\n            return this.addState === AddState.Adding;\n        }\n\n        @computed get isAdded() {\n            return this.addState === AddState.Added;\n        }\n\n        @computed get isAddFailed() {\n            return this.addState === AddState.AddFailed;\n        }*/\n    insertUploadFile(){\n\n    }\n\n    /*   fileUpload = flow(function* fileUpload(e) {\n           const formData = new FormData()\n\n           formData.append('file', blob, 'filename.jpg')\n           formData.append('subPath', 'shop')\n\n           const res = await axios.post(`/api/v1/img/uploadImgFile`, formData)\n           try {\n               const formData = new FormData();\n               formData.append('file', e.target.file[0]);\n               const response = yield axios.post('/api/v1/img/uploadImgFile', formData);\n               if(response.status === 200) {\n               }\n           } catch (e) {\n               console.log('error다 이놈아');\n           }\n       });*/\n    fileupload = flow(function* changeUploadFile() {\n        const uploadFile = this.uploadFile;\n        console.log(\"this.uploadFile:\", uploadFile);\n        const formData = new FormData();\n        formData.append('file', uploadFile);\n        console.log(\"fileParam:\", formData);\n        yield axios.post('/api/v1/img/uploadMultipleFiles', formData, {headers: {'Content-Type':'multipart/form-data'}});\n    });\n\n}"]},"metadata":{},"sourceType":"module"}
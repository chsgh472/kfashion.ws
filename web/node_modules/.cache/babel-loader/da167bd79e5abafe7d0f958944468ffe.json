{"ast":null,"code":"import _initializerDefineProperty from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _temp;\n\nimport { action, computed, flow, observable, toJS } from \"mobx\";\nimport axios from \"axios\";\nimport * as validation from \"../common/Validation\";\nconst MinUserId = 4;\nconst MinUserName = 2;\nconst MinPassword = 4;\nconst MinNickName = 2;\nconst State = {\n  Ready: 'Ready',\n  Pending: 'Pending',\n  NotAvailableEmail: 'NotAvailableEmail',\n  Success: 'Success',\n  Fail: 'Fail'\n};\nconst EmptyNewMember = {\n  id: '',\n  email: '',\n  password: '',\n  passwordConfirm: '',\n  name: '',\n  nickName: ''\n};\nconst EmptyAgreements = {\n  all: false,\n  service: false,\n  privacy: false\n};\nlet SignUpStore = (_class = (_temp = class SignUpStore {\n  constructor() {\n    _initializerDefineProperty(this, \"state\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"newMember\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"agreements\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"serverMode\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"initialize\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"clearState\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"changeNewMemberId\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"changeNewMemberEmail\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"changeNewMemberPassword\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"changeNewMemberPasswordConfirm\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"changeNewMemberUserName\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"changeNewMemberNickName\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"changeAgreementsAll\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"changeAgreementsService\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"changeAgreementsPrivacy\", _descriptor15, this);\n\n    this.doSignUp = flow(function* doSignUp(doAction) {\n      this.state = State.Pending;\n\n      try {\n        const response = yield axios.get(`/api/v1/kfashion/users/signupcheck/email?=${this.newMember.email}`);\n        const isNotAvailEmail = response.data.result;\n\n        if (!isNotAvailEmail) {\n          const param = toJS(this.newMember);\n          delete param.passwordConfirm;\n          const resp = yield axios.post('/api/v1/kfashion/users/signup', param);\n\n          if (resp.status === 200) {\n            this.state = State.Success;\n            if (doAction !== undefined) doAction();\n          } else {\n            this.state = State.NotAvailableEmail;\n          }\n        } else {\n          console.log('이메일이 있다 임마');\n        }\n      } catch (e) {\n        console.log('에러좀 나지 마라');\n      }\n    });\n    this.getServerMode = flow(function* getServerMode() {\n      try {\n        const response = yield axios.get('/api/v1/informations/mode');\n        const serverMode = response.data;\n        this.serverMode = serverMode;\n      } catch (error) {\n        console.log(\"Can't get server mode\");\n      }\n    });\n  }\n\n  get isEmailInputed() {\n    return this.newMember.email !== undefined && this.newMember.email !== null && this.newMember.email.length > 0;\n  }\n\n  get canSignUp() {\n    const id = this.newMember.id.length >= MinUserId;\n    const emailVerification = validation.validateEmail(this.newMember.email);\n    const agreements = this.agreements.service && this.agreements.privacy;\n    const passwordConfirm = this.newMember.password === this.newMember.passwordConfirm;\n    const password = this.newMember.password.length >= MinPassword;\n    const userName = this.newMember.name.length >= MinUserName;\n    const nickName = this.newMember.nickName.length >= MinNickName;\n    return emailVerification && agreements && passwordConfirm && password && userName && nickName;\n  }\n\n  get canAdminSignUp() {\n    const id = this.newMember.id.length >= MinUserId;\n    const emailVerification = validation.validateEmail(this.newMember.email);\n    const passwordConfirm = this.newMember.password === this.newMember.passwordConfirm;\n    const password = this.newMember.password.length >= MinPassword;\n    const userName = this.newMember.name.length >= MinUserName;\n    const nickName = this.newMember.nickName.length >= MinNickName;\n    return emailVerification && passwordConfirm && password && userName && nickName;\n  }\n\n  get isValidId() {\n    return this.newMember.id.length >= MinUserId;\n  }\n\n  get isValidEmail() {\n    return validation.validateEmail(this.newMember.email);\n  }\n\n  get isValidPassword() {\n    return this.newMember.password.length >= MinPassword;\n  }\n\n  get isPasswordConfirmed() {\n    return this.newMember.password === this.newMember.passwordConfirm;\n  }\n\n  get isValidUsername() {\n    return this.newMember.name.length >= MinUserName;\n  }\n\n  get isValidNickName() {\n    return this.newMember.nickName.length >= MinNickName;\n  }\n\n  get isPending() {\n    return this.state === State.Pending;\n  }\n\n  get isSignUpSuccess() {\n    return this.state === State.Success;\n  }\n\n  get isSignUpFailed() {\n    return this.state === State.Fail;\n  }\n\n  get isNotAvailableEmail() {\n    return this.state === State.NotAvailableEmail;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"state\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return State.Ready;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"newMember\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return { ...EmptyNewMember\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"agreements\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return { ...EmptyAgreements\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"serverMode\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"initialize\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return email => {\n      this.state = State.Ready;\n      this.newMember = { ...EmptyNewMember\n      };\n      this.agreements = { ...EmptyAgreements\n      };\n\n      if (email !== undefined && email !== null && email.length > 0 && validation.validateEmail(email)) {\n        this.newMember.email = email;\n      }\n    };\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"clearState\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.state = State.Ready;\n    };\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"changeNewMemberId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.newMember.id = id;\n    };\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"changeNewMemberEmail\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return email => {\n      this.newMember.email = email;\n    };\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"changeNewMemberPassword\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return password => {\n      this.newMember.password = password;\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"changeNewMemberPasswordConfirm\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return passwordConfirm => {\n      this.newMember.passwordConfirm = passwordConfirm;\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"changeNewMemberUserName\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return name => {\n      this.newMember.name = name;\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"changeNewMemberNickName\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return nickName => {\n      this.newMember.nickName = nickName;\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"changeAgreementsAll\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return allAgreement => {\n      if (allAgreement) {\n        this.agreements.all = true;\n        this.agreements.service = true;\n        this.agreements.privacy = true;\n      } else {\n        this.agreements.all = false;\n        this.agreements.service = false;\n        this.agreements.privacy = false;\n      }\n    };\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"changeAgreementsService\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return serviceAgreements => {\n      if (serviceAgreements) {\n        this.agreements.service = true;\n      } else {\n        this.agreements.all = false;\n        this.agreements.service = false;\n      }\n    };\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"changeAgreementsPrivacy\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return privacyAgreements => {\n      if (privacyAgreements) {\n        this.agreements.privacy = true;\n      } else {\n        this.agreements.all = false;\n        this.agreements.privacy = false;\n      }\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"isEmailInputed\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isEmailInputed\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"canSignUp\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"canSignUp\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"canAdminSignUp\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"canAdminSignUp\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isValidId\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isValidId\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isValidEmail\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isValidEmail\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isValidPassword\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isValidPassword\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isPasswordConfirmed\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isPasswordConfirmed\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isValidUsername\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isValidUsername\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isValidNickName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isValidNickName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isPending\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isPending\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isSignUpSuccess\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isSignUpSuccess\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isSignUpFailed\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isSignUpFailed\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isNotAvailableEmail\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isNotAvailableEmail\"), _class.prototype)), _class);\nexport { SignUpStore as default };","map":{"version":3,"sources":["/Users/jangseong-yeol/kfashion.ws/web/src/stores/SignUpStore.js"],"names":["action","computed","flow","observable","toJS","axios","validation","MinUserId","MinUserName","MinPassword","MinNickName","State","Ready","Pending","NotAvailableEmail","Success","Fail","EmptyNewMember","id","email","password","passwordConfirm","name","nickName","EmptyAgreements","all","service","privacy","SignUpStore","doSignUp","doAction","state","response","get","newMember","isNotAvailEmail","data","result","param","resp","post","status","undefined","console","log","e","getServerMode","serverMode","error","isEmailInputed","length","canSignUp","emailVerification","validateEmail","agreements","userName","canAdminSignUp","isValidId","isValidEmail","isValidPassword","isPasswordConfirmed","isValidUsername","isValidNickName","isPending","isSignUpSuccess","isSignUpFailed","isNotAvailableEmail","allAgreement","serviceAgreements","privacyAgreements"],"mappings":"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","sourcesContent":["import {action, computed, flow, observable, toJS} from \"mobx\";\nimport axios from \"axios\";\nimport * as validation from \"../common/Validation\";\n\nconst MinUserId = 4;\nconst MinUserName = 2;\nconst MinPassword = 4;\nconst MinNickName = 2;\n\nconst State = {\n    Ready: 'Ready',\n    Pending: 'Pending',\n    NotAvailableEmail: 'NotAvailableEmail',\n    Success: 'Success',\n    Fail: 'Fail',\n}\n\nconst EmptyNewMember = {\n    id: '',\n    email: '',\n    password: '',\n    passwordConfirm: '',\n    name: '',\n    nickName: '',\n}\n\nconst EmptyAgreements = {\n    all: false,\n    service: false,\n    privacy: false,\n}\n\nexport default class SignUpStore {\n    @observable state = State.Ready;\n    @observable newMember = {...EmptyNewMember}\n    @observable agreements = {...EmptyAgreements}\n    @observable serverMode = '';\n\n    @action initialize = (email) => {\n        this.state = State.Ready;\n        this.newMember = {...EmptyNewMember}\n        this.agreements = {...EmptyAgreements}\n\n        if((email !== undefined) && (email !== null) && (email.length > 0) && validation.validateEmail(email)) {\n            this.newMember.email = email;\n        }\n    }\n\n    @action clearState = () => {\n        this.state = State.Ready;\n    }\n    @action changeNewMemberId = (id) => {\n        this.newMember.id = id;\n    }\n    @action changeNewMemberEmail = (email) => {\n        this.newMember.email = email;\n    }\n\n    @action changeNewMemberPassword = (password) => {\n        this.newMember.password = password;\n    }\n\n    @action changeNewMemberPasswordConfirm = (passwordConfirm) => {\n        this.newMember.passwordConfirm = passwordConfirm;\n    }\n\n    @action changeNewMemberUserName = (name) => {\n        this.newMember.name = name;\n    }\n\n    @action changeNewMemberNickName = (nickName) => {\n        this.newMember.nickName = nickName;\n    }\n\n    @action changeAgreementsAll = (allAgreement) => {\n        if(allAgreement) {\n            this.agreements.all = true;\n            this.agreements.service = true;\n            this.agreements.privacy = true;\n        } else {\n            this.agreements.all = false;\n            this.agreements.service = false;\n            this.agreements.privacy = false;\n        }\n    }\n\n    @action changeAgreementsService = (serviceAgreements) => {\n        if(serviceAgreements) {\n            this.agreements.service = true;\n        } else {\n            this.agreements.all = false;\n            this.agreements.service = false;\n        }\n    }\n\n    @action changeAgreementsPrivacy = (privacyAgreements) => {\n        if(privacyAgreements) {\n            this.agreements.privacy = true;\n        } else {\n            this.agreements.all = false;\n            this.agreements.privacy = false;\n        }\n    }\n\n    @computed get isEmailInputed() {\n        return (this.newMember.email !== undefined) && (this.newMember.email !== null) && (this.newMember.email.length > 0);\n    }\n\n    @computed get canSignUp() {\n        const id = this.newMember.id.length >= MinUserId;\n        const emailVerification = validation.validateEmail(this.newMember.email);\n        const agreements = this.agreements.service && this.agreements.privacy;\n        const passwordConfirm = this.newMember.password === this.newMember.passwordConfirm;\n        const password = this.newMember.password.length >= MinPassword;\n        const userName = this.newMember.name.length >= MinUserName;\n        const nickName = this.newMember.nickName.length >= MinNickName;\n\n        return emailVerification && agreements && passwordConfirm && password && userName && nickName;\n    }\n\n    @computed get canAdminSignUp() {\n        const id = this.newMember.id.length >= MinUserId;\n        const emailVerification = validation.validateEmail(this.newMember.email);\n        const passwordConfirm = this.newMember.password === this.newMember.passwordConfirm;\n        const password = this.newMember.password.length >= MinPassword;\n        const userName = this.newMember.name.length >= MinUserName;\n        const nickName = this.newMember.nickName.length >= MinNickName;\n\n        return emailVerification && passwordConfirm && password && userName && nickName;\n    }\n\n    @computed get isValidId() {\n        return this.newMember.id.length >= MinUserId;\n    }\n    @computed get isValidEmail() {\n        return validation.validateEmail(this.newMember.email);\n    }\n\n    @computed get isValidPassword() {\n        return this.newMember.password.length >= MinPassword;\n    }\n\n    @computed get isPasswordConfirmed() {\n        return this.newMember.password === this.newMember.passwordConfirm;\n    }\n\n    @computed get isValidUsername() {\n        return this.newMember.name.length >= MinUserName;\n    }\n\n    @computed get isValidNickName() {\n        return this.newMember.nickName.length >= MinNickName;\n    }\n\n    @computed get isPending() {\n        return this.state === State.Pending;\n    }\n\n    @computed get isSignUpSuccess() {\n        return this.state === State.Success;\n    }\n\n    @computed get isSignUpFailed() {\n        return this.state === State.Fail;\n    }\n\n    @computed get isNotAvailableEmail() {\n        return this.state === State.NotAvailableEmail;\n    }\n\n    doSignUp = flow(function* doSignUp(doAction) {\n        this.state = State.Pending;\n        try {\n        const response = yield axios.get(`/api/v1/kfashion/users/signupcheck/email?=${this.newMember.email}`)\n        const isNotAvailEmail = response.data.result;\n\n        if(!isNotAvailEmail) {\n\n            const param = toJS(this.newMember);\n            delete param.passwordConfirm;\n\n            const resp = yield axios.post('/api/v1/kfashion/users/signup', param);\n            if (resp.status === 200) {\n                this.state = State.Success;\n                if (doAction !== undefined) doAction();\n            } else {\n                this.state = State.NotAvailableEmail;\n            }\n        }else{\n            console.log('이메일이 있다 임마')\n        }\n        } catch (e) {\n            console.log('에러좀 나지 마라')\n        }\n\n    });\n\n    getServerMode = flow(function* getServerMode() {\n        try {\n            const response = yield axios.get('/api/v1/informations/mode');\n            const serverMode = response.data;\n\n            this.serverMode = serverMode;\n        } catch(error) {\n            console.log(\"Can't get server mode\");\n        }\n    })\n}"]},"metadata":{},"sourceType":"module"}
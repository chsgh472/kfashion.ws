{"ast":null,"code":"import _ from \"lodash\";\nconst Janus = window.Janus;\n\nconst Log = (msg, ...args) => {\n  if (msg) {\n    if (typeof msg === 'string') {\n      console.log(`[OnTheLive Demo] ${msg}`, ...args);\n    } else {\n      console.log(`[OnTheLive Demo] ${JSON.stringify(msg)}`, ...args);\n    }\n  } else {\n    console.log();\n  }\n};\n\nexport class JanusDemo {\n  constructor(teacherVideoRef, studentVideoRef, config) {\n    this.attachEchoPlugin = (janus, video, bitrate, simulcast) => {\n      const that = this;\n      const demoId = Janus.randomString(12);\n      Log('Attaching echo plugin');\n      janus.attach({\n        plugin: 'janus.plugin.echotest',\n        opaqueId: demoId,\n        success: pluginHandle => {\n          Log('Plugin attach success : pluginHandle = ', pluginHandle);\n          that.echoHandle = pluginHandle;\n          const joinRequest = {\n            video: true,\n            audio: false,\n            videocode: 'vp8',\n            audiocodec: 'opus'\n          };\n          pluginHandle.send({\n            message: joinRequest,\n            success: () => {\n              Log('Join success');\n              that.publish(joinRequest, video, bitrate, simulcast);\n            },\n            error: () => {\n              Log('Join failed');\n            }\n          });\n        },\n        error: error => {\n          Log('Plugin attach error : error = ', error);\n        },\n        consentDialog: on => {\n          Log('ConsentDialog : on = ', on);\n        },\n        mediaState: (medium, on) => {\n          Log('MediaState : medium = ', medium);\n          Log('MediaState : on = ', on);\n        },\n        webrtcState: on => {\n          Log('WebRTCState : on = ', on);\n        },\n        slowLink: (uplink, lose) => {\n          Log('SlowLink : uplink = ', uplink);\n          Log('SlowLink : lose = ', lose);\n        },\n        onmessage: (msg, jsep) => {\n          Log('OnMessage : msg = ', msg);\n          Log('OnMessage : jsep = ', jsep);\n\n          if (jsep !== undefined && jsep !== null) {\n            Log('Handling remote jsep');\n            that.echoHandle.handleRemoteJsep({\n              jsep: jsep\n            });\n          }\n        },\n        onlocalstream: stream => {\n          Log('OnLocalStream : stream = ', stream);\n\n          if (that.teacherVideoRef.current) {\n            Log('Publisher - Attach local media stream');\n            const children = that.teacherVideoRef.current.childNodes;\n\n            for (let i = 0; i < children.length; i++) {\n              that.teacherVideoRef.current.removeChild(children[i]);\n            }\n\n            const videoEl = document.createElement('video');\n            videoEl.setAttribute('autoplay', 'true');\n            videoEl.setAttribute('playsinline', 'true');\n            videoEl.setAttribute('muted', 'true');\n            videoEl.setAttribute('width', '100%');\n            videoEl.setAttribute('height', '100%');\n            that.teacherVideoRef.current.appendChild(videoEl);\n            Janus.attachMediaStream(videoEl, stream);\n          }\n        },\n        onremotestream: stream => {\n          Log('OnRemoteStream : stream = ', stream);\n\n          if (that.studentVideoRef.current) {\n            Log('Attach remote stream');\n            setTimeout(() => {\n              const children = that.studentVideoRef.current.childNodes;\n\n              for (let i = 0; i < children.length; i++) {\n                that.studentVideoRef.current.removeChild(children[i]);\n              }\n\n              const videoEl = document.createElement('video');\n              videoEl.setAttribute('autoplay', 'true');\n              videoEl.setAttribute('playsinline', 'true');\n              videoEl.setAttribute('muted', 'true');\n              videoEl.setAttribute('width', '100%');\n              videoEl.setAttribute('height', '100%');\n              that.studentVideoRef.current.appendChild(videoEl);\n              Janus.attachMediaStream(videoEl, stream);\n            }, 1000);\n          }\n        },\n        oncleanup: function () {\n          Log('OnCleanUp');\n        }\n      });\n    };\n\n    this.publish = (request, video, bitrate, simulcast) => {\n      Log(`Publishing : simulcast=${simulcast}, bitrate=${bitrate}, video = `, video);\n      const that = this;\n      const publishRequest = {\n        media: {\n          video: video,\n          audio: false,\n          videocodec: 'vp8',\n          audiocodec: 'opus'\n        },\n        simulcast: simulcast,\n        simulcast2: false,\n        success: jsep => {\n          Log('Create offer success : jsep = ', jsep);\n          Log('Sending publish command');\n          that.echoHandle.send({\n            message: request,\n            jsep: jsep\n          });\n        },\n        error: error => {\n          Log('Create offer error : error = ', error);\n        }\n      };\n      Log('Creating offer');\n      this.echoHandle.createOffer(publishRequest);\n    };\n\n    this.teacherVideoRef = teacherVideoRef;\n    this.studentVideoRef = studentVideoRef;\n    this.janus = undefined;\n    this.echoHandle = undefined;\n    this.teacherHandle = undefined;\n    this.teacherId = '';\n    this.studentHandle = undefined;\n    this.onInitializeSuccess = config ? config.onInitializeSuccess : undefined;\n    this.onInitializeError = config ? config.onInitializeError : undefined;\n    this.onPublished = config ? config.onPublished : undefined;\n  }\n\n  start(video, bitrate, simulcast) {\n    let janusServer = 'wss://bs010.onthe.live:8989/janus';\n    Log(`Connecting to ${janusServer}`);\n    let janus = new Janus({\n      server: janusServer,\n      success: () => {\n        Log('Connect success');\n        this.janus = janus;\n        this.attachEchoPlugin(janus, video, bitrate, simulcast);\n\n        if (this.onInitializeSuccess) {\n          this.onInitializeSuccess();\n        }\n      },\n      error: () => {\n        Log('Connect error');\n\n        if (this.onInitializeError) {\n          this.onInitializeError();\n        }\n      },\n      destroyed: () => {\n        Log('Janus Object destroyed');\n        window.location.reload();\n      }\n    });\n  }\n\n  stop() {\n    if (this.janus) {\n      this.janus.destroy();\n      this.janus = undefined;\n    }\n  }\n\n}\n\nJanusDemo.listVideoDevices = onSuccess => {\n  Janus.listDevices(devices => {\n    console.log('Video devices : ', devices);\n\n    const videoDevices = _.filter(devices, d => d.kind === 'videoinput' && d.deviceId !== 'default');\n\n    if (onSuccess) {\n      onSuccess(videoDevices);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/jangseong-yeol/kfashion.ws/web/src/views/JanusDemo.js"],"names":["_","Janus","window","Log","msg","args","console","log","JSON","stringify","JanusDemo","constructor","teacherVideoRef","studentVideoRef","config","attachEchoPlugin","janus","video","bitrate","simulcast","that","demoId","randomString","attach","plugin","opaqueId","success","pluginHandle","echoHandle","joinRequest","audio","videocode","audiocodec","send","message","publish","error","consentDialog","on","mediaState","medium","webrtcState","slowLink","uplink","lose","onmessage","jsep","undefined","handleRemoteJsep","onlocalstream","stream","current","children","childNodes","i","length","removeChild","videoEl","document","createElement","setAttribute","appendChild","attachMediaStream","onremotestream","setTimeout","oncleanup","request","publishRequest","media","videocodec","simulcast2","createOffer","teacherHandle","teacherId","studentHandle","onInitializeSuccess","onInitializeError","onPublished","start","janusServer","server","destroyed","location","reload","stop","destroy","listVideoDevices","onSuccess","listDevices","devices","videoDevices","filter","d","kind","deviceId"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AAEA,MAAMC,KAAK,GAAGC,MAAM,CAACD,KAArB;;AAEA,MAAME,GAAG,GAAG,CAACC,GAAD,EAAM,GAAGC,IAAT,KAAkB;AAC1B,MAAGD,GAAH,EAAQ;AACJ,QAAG,OAAOA,GAAP,KAAe,QAAlB,EAA4B;AACxBE,MAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBH,GAAI,EAApC,EAAuC,GAAGC,IAA1C;AACH,KAFD,MAEO;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBC,IAAI,CAACC,SAAL,CAAeL,GAAf,CAAoB,EAApD,EAAuD,GAAGC,IAA1D;AACH;AACJ,GAND,MAMO;AACHC,IAAAA,OAAO,CAACC,GAAR;AACH;AACJ,CAVD;;AAYA,OAAO,MAAMG,SAAN,CAAgB;AACnBC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,eAAlB,EAAmCC,MAAnC,EAA2C;AAAA,SAmEtDC,gBAnEsD,GAmEnC,CAACC,KAAD,EAAQC,KAAR,EAAeC,OAAf,EAAwBC,SAAxB,KAAsC;AACrD,YAAMC,IAAI,GAAG,IAAb;AACA,YAAMC,MAAM,GAAGpB,KAAK,CAACqB,YAAN,CAAmB,EAAnB,CAAf;AAEAnB,MAAAA,GAAG,CAAC,uBAAD,CAAH;AACAa,MAAAA,KAAK,CAACO,MAAN,CAAa;AACTC,QAAAA,MAAM,EAAE,uBADC;AAETC,QAAAA,QAAQ,EAAEJ,MAFD;AAGTK,QAAAA,OAAO,EAAGC,YAAD,IAAkB;AACvBxB,UAAAA,GAAG,CAAC,yCAAD,EAA4CwB,YAA5C,CAAH;AAEAP,UAAAA,IAAI,CAACQ,UAAL,GAAkBD,YAAlB;AAEA,gBAAME,WAAW,GAAG;AAACZ,YAAAA,KAAK,EAAE,IAAR;AAAca,YAAAA,KAAK,EAAE,KAArB;AAA4BC,YAAAA,SAAS,EAAE,KAAvC;AAA8CC,YAAAA,UAAU,EAAE;AAA1D,WAApB;AACAL,UAAAA,YAAY,CAACM,IAAb,CAAkB;AACdC,YAAAA,OAAO,EAAEL,WADK;AAEdH,YAAAA,OAAO,EAAE,MAAM;AACXvB,cAAAA,GAAG,CAAC,cAAD,CAAH;AACAiB,cAAAA,IAAI,CAACe,OAAL,CAAaN,WAAb,EAA0BZ,KAA1B,EAAiCC,OAAjC,EAA0CC,SAA1C;AACH,aALa;AAMdiB,YAAAA,KAAK,EAAE,MAAM;AACTjC,cAAAA,GAAG,CAAC,aAAD,CAAH;AACH;AARa,WAAlB;AAUH,SAnBQ;AAoBTiC,QAAAA,KAAK,EAAGA,KAAD,IAAW;AACdjC,UAAAA,GAAG,CAAC,gCAAD,EAAmCiC,KAAnC,CAAH;AAEH,SAvBQ;AAwBTC,QAAAA,aAAa,EAAGC,EAAD,IAAQ;AACnBnC,UAAAA,GAAG,CAAC,uBAAD,EAA0BmC,EAA1B,CAAH;AACH,SA1BQ;AA2BTC,QAAAA,UAAU,EAAE,CAACC,MAAD,EAASF,EAAT,KAAgB;AACxBnC,UAAAA,GAAG,CAAC,wBAAD,EAA2BqC,MAA3B,CAAH;AACArC,UAAAA,GAAG,CAAC,oBAAD,EAAuBmC,EAAvB,CAAH;AACH,SA9BQ;AA+BTG,QAAAA,WAAW,EAAGH,EAAD,IAAQ;AACjBnC,UAAAA,GAAG,CAAC,qBAAD,EAAwBmC,EAAxB,CAAH;AACH,SAjCQ;AAkCTI,QAAAA,QAAQ,EAAE,CAACC,MAAD,EAASC,IAAT,KAAkB;AACxBzC,UAAAA,GAAG,CAAC,sBAAD,EAAyBwC,MAAzB,CAAH;AACAxC,UAAAA,GAAG,CAAC,oBAAD,EAAuByC,IAAvB,CAAH;AACH,SArCQ;AAsCTC,QAAAA,SAAS,EAAE,CAACzC,GAAD,EAAM0C,IAAN,KAAe;AACtB3C,UAAAA,GAAG,CAAC,oBAAD,EAAuBC,GAAvB,CAAH;AACAD,UAAAA,GAAG,CAAC,qBAAD,EAAwB2C,IAAxB,CAAH;;AAEA,cAAGA,IAAI,KAAKC,SAAT,IAAsBD,IAAI,KAAK,IAAlC,EAAwC;AACpC3C,YAAAA,GAAG,CAAC,sBAAD,CAAH;AACAiB,YAAAA,IAAI,CAACQ,UAAL,CAAgBoB,gBAAhB,CAAiC;AAACF,cAAAA,IAAI,EAAEA;AAAP,aAAjC;AACH;AACJ,SA9CQ;AA+CTG,QAAAA,aAAa,EAAGC,MAAD,IAAY;AACvB/C,UAAAA,GAAG,CAAC,2BAAD,EAA8B+C,MAA9B,CAAH;;AAEA,cAAG9B,IAAI,CAACR,eAAL,CAAqBuC,OAAxB,EAAiC;AAC7BhD,YAAAA,GAAG,CAAC,uCAAD,CAAH;AACA,kBAAMiD,QAAQ,GAAGhC,IAAI,CAACR,eAAL,CAAqBuC,OAArB,CAA6BE,UAA9C;;AACA,iBAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,QAAQ,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjClC,cAAAA,IAAI,CAACR,eAAL,CAAqBuC,OAArB,CAA6BK,WAA7B,CAAyCJ,QAAQ,CAACE,CAAD,CAAjD;AACH;;AAED,kBAAMG,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAhB;AACAF,YAAAA,OAAO,CAACG,YAAR,CAAqB,UAArB,EAAiC,MAAjC;AACAH,YAAAA,OAAO,CAACG,YAAR,CAAqB,aAArB,EAAoC,MAApC;AACAH,YAAAA,OAAO,CAACG,YAAR,CAAqB,OAArB,EAA8B,MAA9B;AACAH,YAAAA,OAAO,CAACG,YAAR,CAAqB,OAArB,EAA8B,MAA9B;AACAH,YAAAA,OAAO,CAACG,YAAR,CAAqB,QAArB,EAA+B,MAA/B;AAEAxC,YAAAA,IAAI,CAACR,eAAL,CAAqBuC,OAArB,CAA6BU,WAA7B,CAAyCJ,OAAzC;AAEAxD,YAAAA,KAAK,CAAC6D,iBAAN,CAAwBL,OAAxB,EAAiCP,MAAjC;AACH;AACJ,SApEQ;AAqETa,QAAAA,cAAc,EAAGb,MAAD,IAAY;AACxB/C,UAAAA,GAAG,CAAC,4BAAD,EAA+B+C,MAA/B,CAAH;;AAEA,cAAG9B,IAAI,CAACP,eAAL,CAAqBsC,OAAxB,EAAiC;AAC7BhD,YAAAA,GAAG,CAAC,sBAAD,CAAH;AAEA6D,YAAAA,UAAU,CAAC,MAAM;AACb,oBAAMZ,QAAQ,GAAGhC,IAAI,CAACP,eAAL,CAAqBsC,OAArB,CAA6BE,UAA9C;;AACA,mBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtClC,gBAAAA,IAAI,CAACP,eAAL,CAAqBsC,OAArB,CAA6BK,WAA7B,CAAyCJ,QAAQ,CAACE,CAAD,CAAjD;AACH;;AAED,oBAAMG,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAhB;AACAF,cAAAA,OAAO,CAACG,YAAR,CAAqB,UAArB,EAAiC,MAAjC;AACAH,cAAAA,OAAO,CAACG,YAAR,CAAqB,aAArB,EAAoC,MAApC;AACAH,cAAAA,OAAO,CAACG,YAAR,CAAqB,OAArB,EAA8B,MAA9B;AACAH,cAAAA,OAAO,CAACG,YAAR,CAAqB,OAArB,EAA8B,MAA9B;AACAH,cAAAA,OAAO,CAACG,YAAR,CAAqB,QAArB,EAA+B,MAA/B;AAEAxC,cAAAA,IAAI,CAACP,eAAL,CAAqBsC,OAArB,CAA6BU,WAA7B,CAAyCJ,OAAzC;AAEAxD,cAAAA,KAAK,CAAC6D,iBAAN,CAAwBL,OAAxB,EAAiCP,MAAjC;AACH,aAhBS,EAgBP,IAhBO,CAAV;AAiBH;AACJ,SA7FQ;AA8FTe,QAAAA,SAAS,EAAE,YAAW;AAClB9D,UAAAA,GAAG,CAAC,WAAD,CAAH;AACH;AAhGQ,OAAb;AAkGH,KA1KqD;;AAAA,SA4KtDgC,OA5KsD,GA4K5C,CAAC+B,OAAD,EAAUjD,KAAV,EAAiBC,OAAjB,EAA0BC,SAA1B,KAAwC;AAC9ChB,MAAAA,GAAG,CAAE,0BAAyBgB,SAAU,aAAYD,OAAQ,YAAzD,EAAsED,KAAtE,CAAH;AAEA,YAAMG,IAAI,GAAG,IAAb;AACA,YAAM+C,cAAc,GAAG;AACnBC,QAAAA,KAAK,EAAE;AAACnD,UAAAA,KAAK,EAAEA,KAAR;AAAea,UAAAA,KAAK,EAAE,KAAtB;AAA6BuC,UAAAA,UAAU,EAAE,KAAzC;AAAgDrC,UAAAA,UAAU,EAAE;AAA5D,SADY;AAEnBb,QAAAA,SAAS,EAAEA,SAFQ;AAGnBmD,QAAAA,UAAU,EAAE,KAHO;AAInB5C,QAAAA,OAAO,EAAGoB,IAAD,IAAU;AACf3C,UAAAA,GAAG,CAAC,gCAAD,EAAmC2C,IAAnC,CAAH;AAEA3C,UAAAA,GAAG,CAAC,yBAAD,CAAH;AACAiB,UAAAA,IAAI,CAACQ,UAAL,CAAgBK,IAAhB,CAAqB;AAACC,YAAAA,OAAO,EAAEgC,OAAV;AAAmBpB,YAAAA,IAAI,EAAEA;AAAzB,WAArB;AACH,SATkB;AAUnBV,QAAAA,KAAK,EAAGA,KAAD,IAAW;AACdjC,UAAAA,GAAG,CAAC,+BAAD,EAAkCiC,KAAlC,CAAH;AACH;AAZkB,OAAvB;AAeAjC,MAAAA,GAAG,CAAC,gBAAD,CAAH;AACA,WAAKyB,UAAL,CAAgB2C,WAAhB,CAA4BJ,cAA5B;AACH,KAjMqD;;AAClD,SAAKvD,eAAL,GAAuBA,eAAvB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AAEA,SAAKG,KAAL,GAAa+B,SAAb;AACA,SAAKnB,UAAL,GAAkBmB,SAAlB;AAGA,SAAKyB,aAAL,GAAqBzB,SAArB;AACA,SAAK0B,SAAL,GAAiB,EAAjB;AACA,SAAKC,aAAL,GAAqB3B,SAArB;AAEA,SAAK4B,mBAAL,GAA2B7D,MAAM,GAAGA,MAAM,CAAC6D,mBAAV,GAAgC5B,SAAjE;AACA,SAAK6B,iBAAL,GAAyB9D,MAAM,GAAGA,MAAM,CAAC8D,iBAAV,GAA8B7B,SAA7D;AACA,SAAK8B,WAAL,GAAmB/D,MAAM,GAAGA,MAAM,CAAC+D,WAAV,GAAwB9B,SAAjD;AACH;;AAcD+B,EAAAA,KAAK,CAAC7D,KAAD,EAAQC,OAAR,EAAiBC,SAAjB,EAA4B;AAC7B,QAAI4D,WAAW,GAAG,mCAAlB;AAEA5E,IAAAA,GAAG,CAAE,iBAAgB4E,WAAY,EAA9B,CAAH;AACA,QAAI/D,KAAK,GAAG,IAAIf,KAAJ,CAAU;AAClB+E,MAAAA,MAAM,EAAED,WADU;AAElBrD,MAAAA,OAAO,EAAE,MAAM;AACXvB,QAAAA,GAAG,CAAC,iBAAD,CAAH;AAEA,aAAKa,KAAL,GAAaA,KAAb;AACA,aAAKD,gBAAL,CAAsBC,KAAtB,EAA6BC,KAA7B,EAAoCC,OAApC,EAA6CC,SAA7C;;AAEA,YAAG,KAAKwD,mBAAR,EAA6B;AACzB,eAAKA,mBAAL;AACH;AACJ,OAXiB;AAYlBvC,MAAAA,KAAK,EAAE,MAAM;AACTjC,QAAAA,GAAG,CAAC,eAAD,CAAH;;AAEA,YAAG,KAAKyE,iBAAR,EAA2B;AACvB,eAAKA,iBAAL;AACH;AACJ,OAlBiB;AAmBlBK,MAAAA,SAAS,EAAE,MAAM;AACb9E,QAAAA,GAAG,CAAC,wBAAD,CAAH;AAEAD,QAAAA,MAAM,CAACgF,QAAP,CAAgBC,MAAhB;AACH;AAvBiB,KAAV,CAAZ;AAyBH;;AAEDC,EAAAA,IAAI,GAAG;AACH,QAAG,KAAKpE,KAAR,EAAe;AACX,WAAKA,KAAL,CAAWqE,OAAX;AACA,WAAKrE,KAAL,GAAa+B,SAAb;AACH;AACJ;;AAlEkB;;AAAVrC,S,CAkBF4E,gB,GAAoBC,SAAD,IAAe;AACrCtF,EAAAA,KAAK,CAACuF,WAAN,CAAmBC,OAAD,IAAa;AAC3BnF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCkF,OAAhC;;AAEA,UAAMC,YAAY,GAAG1F,CAAC,CAAC2F,MAAF,CAASF,OAAT,EAAmBG,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAW,YAAX,IAA2BD,CAAC,CAACE,QAAF,KAAe,SAAnE,CAArB;;AAEA,QAAGP,SAAH,EAAc;AACVA,MAAAA,SAAS,CAACG,YAAD,CAAT;AACH;AACJ,GARD;AASH,C","sourcesContent":["import _ from \"lodash\";\n\nconst Janus = window.Janus;\n\nconst Log = (msg, ...args) => {\n    if(msg) {\n        if(typeof msg === 'string') {\n            console.log(`[OnTheLive Demo] ${msg}`, ...args);\n        } else {\n            console.log(`[OnTheLive Demo] ${JSON.stringify(msg)}`, ...args);\n        }\n    } else {\n        console.log();\n    }\n}\n\nexport class JanusDemo {\n    constructor(teacherVideoRef, studentVideoRef, config) {\n        this.teacherVideoRef = teacherVideoRef;\n        this.studentVideoRef = studentVideoRef;\n\n        this.janus = undefined;\n        this.echoHandle = undefined;\n\n\n        this.teacherHandle = undefined;\n        this.teacherId = '';\n        this.studentHandle = undefined;\n\n        this.onInitializeSuccess = config ? config.onInitializeSuccess : undefined;\n        this.onInitializeError = config ? config.onInitializeError : undefined;\n        this.onPublished = config ? config.onPublished : undefined;\n    }\n\n    static listVideoDevices = (onSuccess) => {\n        Janus.listDevices((devices) => {\n            console.log('Video devices : ', devices);\n\n            const videoDevices = _.filter(devices, (d) => d.kind === 'videoinput' && d.deviceId !== 'default');\n\n            if(onSuccess) {\n                onSuccess(videoDevices);\n            }\n        });\n    }\n\n    start(video, bitrate, simulcast) {\n        let janusServer = 'wss://bs010.onthe.live:8989/janus';\n\n        Log(`Connecting to ${janusServer}`);\n        let janus = new Janus({\n            server: janusServer,\n            success: () => {\n                Log('Connect success');\n\n                this.janus = janus;\n                this.attachEchoPlugin(janus, video, bitrate, simulcast);\n\n                if(this.onInitializeSuccess) {\n                    this.onInitializeSuccess();\n                }\n            },\n            error: () => {\n                Log('Connect error');\n\n                if(this.onInitializeError) {\n                    this.onInitializeError();\n                }\n            },\n            destroyed: () => {\n                Log('Janus Object destroyed');\n\n                window.location.reload();\n            },\n        });\n    }\n\n    stop() {\n        if(this.janus) {\n            this.janus.destroy();\n            this.janus = undefined;\n        }\n    }\n\n    attachEchoPlugin = (janus, video, bitrate, simulcast) => {\n        const that = this;\n        const demoId = Janus.randomString(12);\n\n        Log('Attaching echo plugin');\n        janus.attach({\n            plugin: 'janus.plugin.echotest',\n            opaqueId: demoId,\n            success: (pluginHandle) => {\n                Log('Plugin attach success : pluginHandle = ', pluginHandle);\n\n                that.echoHandle = pluginHandle;\n\n                const joinRequest = {video: true, audio: false, videocode: 'vp8', audiocodec: 'opus'};\n                pluginHandle.send({\n                    message: joinRequest,\n                    success: () => {\n                        Log('Join success');\n                        that.publish(joinRequest, video, bitrate, simulcast);\n                    },\n                    error: () => {\n                        Log('Join failed');\n                    }\n                });\n            },\n            error: (error) => {\n                Log('Plugin attach error : error = ', error);\n\n            },\n            consentDialog: (on) => {\n                Log('ConsentDialog : on = ', on);\n            },\n            mediaState: (medium, on) => {\n                Log('MediaState : medium = ', medium);\n                Log('MediaState : on = ', on);\n            },\n            webrtcState: (on) => {\n                Log('WebRTCState : on = ', on);\n            },\n            slowLink: (uplink, lose) => {\n                Log('SlowLink : uplink = ', uplink);\n                Log('SlowLink : lose = ', lose);\n            },\n            onmessage: (msg, jsep) => {\n                Log('OnMessage : msg = ', msg);\n                Log('OnMessage : jsep = ', jsep);\n\n                if(jsep !== undefined && jsep !== null) {\n                    Log('Handling remote jsep');\n                    that.echoHandle.handleRemoteJsep({jsep: jsep});\n                }\n            },\n            onlocalstream: (stream) => {\n                Log('OnLocalStream : stream = ', stream);\n\n                if(that.teacherVideoRef.current) {\n                    Log('Publisher - Attach local media stream');\n                    const children = that.teacherVideoRef.current.childNodes;\n                    for(let i=0; i<children.length; i++) {\n                        that.teacherVideoRef.current.removeChild(children[i]);\n                    }\n\n                    const videoEl = document.createElement('video');\n                    videoEl.setAttribute('autoplay', 'true');\n                    videoEl.setAttribute('playsinline', 'true');\n                    videoEl.setAttribute('muted', 'true');\n                    videoEl.setAttribute('width', '100%');\n                    videoEl.setAttribute('height', '100%');\n\n                    that.teacherVideoRef.current.appendChild(videoEl);\n\n                    Janus.attachMediaStream(videoEl, stream);\n                }\n            },\n            onremotestream: (stream) => {\n                Log('OnRemoteStream : stream = ', stream);\n\n                if(that.studentVideoRef.current) {\n                    Log('Attach remote stream');\n\n                    setTimeout(() => {\n                        const children = that.studentVideoRef.current.childNodes;\n                        for (let i = 0; i < children.length; i++) {\n                            that.studentVideoRef.current.removeChild(children[i]);\n                        }\n\n                        const videoEl = document.createElement('video');\n                        videoEl.setAttribute('autoplay', 'true');\n                        videoEl.setAttribute('playsinline', 'true');\n                        videoEl.setAttribute('muted', 'true');\n                        videoEl.setAttribute('width', '100%');\n                        videoEl.setAttribute('height', '100%');\n\n                        that.studentVideoRef.current.appendChild(videoEl);\n\n                        Janus.attachMediaStream(videoEl, stream);\n                    }, 1000);\n                }\n            },\n            oncleanup: function() {\n                Log('OnCleanUp');\n            },\n        });\n    };\n\n    publish = (request, video, bitrate, simulcast) => {\n        Log(`Publishing : simulcast=${simulcast}, bitrate=${bitrate}, video = `, video);\n\n        const that = this;\n        const publishRequest = {\n            media: {video: video, audio: false, videocodec: 'vp8', audiocodec: 'opus'},\n            simulcast: simulcast,\n            simulcast2: false,\n            success: (jsep) => {\n                Log('Create offer success : jsep = ', jsep);\n\n                Log('Sending publish command');\n                that.echoHandle.send({message: request, jsep: jsep});\n            },\n            error: (error) => {\n                Log('Create offer error : error = ', error);\n            }\n        };\n\n        Log('Creating offer');\n        this.echoHandle.createOffer(publishRequest);\n    };\n}"]},"metadata":{},"sourceType":"module"}
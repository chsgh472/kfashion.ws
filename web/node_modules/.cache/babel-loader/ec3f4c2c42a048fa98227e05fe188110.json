{"ast":null,"code":"import _initializerDefineProperty from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/jangseong-yeol/kfashion.ws/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;\n\nimport { action, flow, observable } from \"mobx\";\nimport axios from \"axios\";\nimport { State } from \"./AuthStore\";\nconst AddState = {\n  Closed: 'Closed',\n  Opened: 'Opened',\n  Adding: 'Adding',\n  Added: 'Added',\n  AddFailed: 'AddFailed'\n};\nconst UpdateState = {\n  Closed: 'Closed',\n  Loading: 'Loading',\n  Loaded: 'Loaded',\n  LoadFailed: 'LoadFailed',\n  Updating: 'Updating',\n  Updated: 'Updated',\n  UpdateFailed: 'UpdateFailed',\n  Uploading: 'Uploading',\n  Uploaded: 'Uploaded',\n  UploadFailed: 'UploadFailed'\n};\nlet FileUploadStore = (_class = (_temp = class FileUploadStore {\n  constructor() {\n    _initializerDefineProperty(this, \"fileList\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"uploadFile\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"addState\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"updateState\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"state\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"changeUploadFile\", _descriptor6, this);\n\n    this.fileupload = flow(function* handleSave(files) {\n      const fileLIst = files;\n\n      try {\n        console.log(fileList);\n        const fileParam = new FormData();\n\n        for (let i = 0; i < this.files.length; i++) {\n          let file = this.files[i];\n          console.log(files);\n          fileParam.append('files[' + i + ']', file);\n        }\n\n        let response = yield axios.post('/api/v1/img/downloadFile', fileParam, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        }).then(function (response) {}).catch(function (response) {});\n      } catch (error) {\n        console.log('error');\n      }\n    });\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"fileList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"uploadFile\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"addState\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return AddState.Closed;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"updateState\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return UpdateState.Closed;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"state\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return State.Ready;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"changeUploadFile\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return file => {\n      this.uploadFile = file;\n    };\n  }\n})), _class);\nexport { FileUploadStore as default };","map":{"version":3,"sources":["/Users/jangseong-yeol/kfashion.ws/web/src/stores/FileUploadStore.js"],"names":["action","flow","observable","axios","State","AddState","Closed","Opened","Adding","Added","AddFailed","UpdateState","Loading","Loaded","LoadFailed","Updating","Updated","UpdateFailed","Uploading","Uploaded","UploadFailed","FileUploadStore","fileupload","handleSave","files","fileLIst","console","log","fileList","fileParam","FormData","i","length","file","append","response","post","headers","then","catch","error","Ready","uploadFile"],"mappings":";;;;;;AAAA,SAAQA,MAAR,EAAgBC,IAAhB,EAAsBC,UAAtB,QAAuC,MAAvC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,aAApB;AAEA,MAAMC,QAAQ,GAAG;AACbC,EAAAA,MAAM,EAAE,QADK;AAEbC,EAAAA,MAAM,EAAE,QAFK;AAGbC,EAAAA,MAAM,EAAE,QAHK;AAIbC,EAAAA,KAAK,EAAE,OAJM;AAKbC,EAAAA,SAAS,EAAE;AALE,CAAjB;AAOA,MAAMC,WAAW,GAAG;AAChBL,EAAAA,MAAM,EAAE,QADQ;AAEhBM,EAAAA,OAAO,EAAE,SAFO;AAGhBC,EAAAA,MAAM,EAAE,QAHQ;AAIhBC,EAAAA,UAAU,EAAE,YAJI;AAKhBC,EAAAA,QAAQ,EAAE,UALM;AAMhBC,EAAAA,OAAO,EAAE,SANO;AAOhBC,EAAAA,YAAY,EAAE,cAPE;AAQhBC,EAAAA,SAAS,EAAE,WARK;AAShBC,EAAAA,QAAQ,EAAE,UATM;AAUhBC,EAAAA,YAAY,EAAE;AAVE,CAApB;IAYqBC,e,sBAAN,MAAMA,eAAN,CAAsB;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,SA4CjCC,UA5CiC,GA4CpBrB,IAAI,CAAC,UAAUsB,UAAV,CAAqBC,KAArB,EAA4B;AAC1C,YAAMC,QAAQ,GAAGD,KAAjB;;AACA,UAAI;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,cAAMC,SAAS,GAAG,IAAIC,QAAJ,EAAlB;;AACA,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKP,KAAL,CAAWQ,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,cAAIE,IAAI,GAAG,KAAKT,KAAL,CAAWO,CAAX,CAAX;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAK,UAAAA,SAAS,CAACK,MAAV,CAAiB,WAAWH,CAAX,GAAe,GAAhC,EAAqCE,IAArC;AACH;;AACD,YAAIE,QAAQ,GAAG,MAAMhC,KAAK,CAACiC,IAAN,CAAY,0BAAZ,EACjBP,SADiB,EAEjB;AACIQ,UAAAA,OAAO,EAAE;AACL,4BAAgB;AADX;AADb,SAFiB,EAOnBC,IAPmB,CAOd,UAASH,QAAT,EAAkB,CACxB,CARoB,EAShBI,KATgB,CASV,UAASJ,QAAT,EAAkB,CACxB,CAVgB,CAArB;AAWH,OAnBD,CAmBE,OAAOK,KAAP,EAAc;AACZd,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,KAxBgB,CA5CgB;AAAA;;AAAA,C,kFAChCzB,U;;;;;WAAsB,E;;8EACtBA,U;;;;;WAAwB,E;;4EACxBA,U;;;;;WAAsBG,QAAQ,CAACC,M;;+EAC/BJ,U;;;;;WAAyBS,WAAW,CAACL,M;;yEACrCJ,U;;;;;WAAmBE,KAAK,CAACqC,K;;oFAMzBzC,M;;;;;WAA2BiC,IAAD,IAAU;AACjC,WAAKS,UAAL,GAAkBT,IAAlB;AACH,K;;;SAbgBZ,e","sourcesContent":["import {action, flow, observable} from \"mobx\";\nimport axios from \"axios\";\nimport {State} from \"./AuthStore\";\n\nconst AddState = {\n    Closed: 'Closed',\n    Opened: 'Opened',\n    Adding: 'Adding',\n    Added: 'Added',\n    AddFailed: 'AddFailed',\n};\nconst UpdateState = {\n    Closed: 'Closed',\n    Loading: 'Loading',\n    Loaded: 'Loaded',\n    LoadFailed: 'LoadFailed',\n    Updating: 'Updating',\n    Updated: 'Updated',\n    UpdateFailed: 'UpdateFailed',\n    Uploading: 'Uploading',\n    Uploaded: 'Uploaded',\n    UploadFailed: 'UploadFailed',\n};\nexport default class FileUploadStore {\n    @observable fileList = [];\n    @observable uploadFile = '';\n    @observable addState = AddState.Closed;\n    @observable updateState = UpdateState.Closed;\n    @observable state = State.Ready;\n/*\n    @action fileUploadHandle = () => {\n        this.fileUpload();\n    }\n*/\n    @action changeUploadFile = (file) => {\n        this.uploadFile = file;\n    }\n/*    @computed get isAdding() {\n        return this.addState === AddState.Adding;\n    }\n\n    @computed get isAdded() {\n        return this.addState === AddState.Added;\n    }\n\n    @computed get isAddFailed() {\n        return this.addState === AddState.AddFailed;\n    }*/\n\n\n /*   fileUpload = flow(function* fileUpload(e) {\n        const formData = new FormData()\n\n        formData.append('file', blob, 'filename.jpg')\n        formData.append('subPath', 'shop')\n\n        const res = await axios.post(`/api/v1/img/uploadImgFile`, formData)\n        try {\n            const formData = new FormData();\n            formData.append('file', e.target.file[0]);\n            const response = yield axios.post('/api/v1/img/uploadImgFile', formData);\n            if(response.status === 200) {\n            }\n        } catch (e) {\n            console.log('error다 이놈아');\n        }\n    });*/\n    fileupload = flow(function* handleSave(files) {\n        const fileLIst = files;\n        try {\n            console.log(fileList);\n            const fileParam = new FormData();\n            for(let i = 0; i < this.files.length; i++ ){\n                let file = this.files[i];\n                console.log(files);\n                fileParam.append('files[' + i + ']', file);\n            }\n            let response = yield axios.post( '/api/v1/img/downloadFile',\n                fileParam,\n                {\n                    headers: {\n                        'Content-Type': 'multipart/form-data'\n                    },\n                }\n            ).then(function(response){\n            })\n                .catch(function(response){\n                });\n        } catch (error) {\n            console.log('error')\n        }\n    });\n\n}"]},"metadata":{},"sourceType":"module"}